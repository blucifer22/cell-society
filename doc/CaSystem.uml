@startuml
class Node<T extends State> {
	- T myState;
	- T nextState;
	- StateRule<T>

	+addNeighbor(Node n);
	+getState(): T;
	+determineNextState();
	+advanceState();
	+get<AspectOfState>();
}

note top of NodeManager
	arranges nodes and assigns
	neighbors based on shape 
	and node amounts. Does
	EVERYTHING with nodes
end note
abstract class NodeManager<T extends State> {
	-ArrayList<Node<T>> nodes;
	-StateRules<T> rules;
	+addNode(Node<T> node);
	+updateNodes();
}

note top of SimulationSystem
	getConfigurations()
	returns a map of
	the value and how
	to represent it 
	(i.e. a slider or whatever)
end note

class SimulationSystem {
	-NodeManager manager
	-StateRules<T> rules;
	+setConfiguration(String name, double value) : double
	+getConfigurations() : List<MapEntries<String, String>>
	+reset()
}
note bottom of RectangularManager
	When nodes are added their neighbors
	are configured in a rectangular pattern.
end note
class RectangularManager<T extends State> extends NodeManager {

}

note top of SimulationManager
	Set the simulation and the system
	the goes with it.
end note

class SimulationManager {
	+resetSimulation()
	+getConfigurations();
	+setConfiguration(String config, double value);
	+setSystem(SYSTEM system);
	+availableSystems();
}

class FireSystem extends SimulationSystem {
	-int flamibility
	+get<Configuration>(String name) : Value
}

abstract class State {
}

class FireState extends State {
	-FIRE_STATE state;
	-double flamability
	-
}

note top of FIRE_STATE
	Nested in
	FireState class
end note
enum FIRE_STATE {
	ONFIRE, BURNT, NORMAL
}

note top of CONWAY_STATE
	Nested in
	ConwayState class
end note
enum CONWAY_STATE {
	DEAD, ALIVE
}

note top of StateRule
	A Possible way of updating
	the state of nodes during the
	simulation?
end note
abstract class StateRule<T extends State> {
	-int rule1; //arbitrary fields
	-double rule2; 
	-int changeChance; 
}

class FireRule<FireState> extends StateRule implements Spreadable {
	-double flamability
	-double stuff
	+getters()
	+setters()
}

class ConwayRule<ConwayState> extends StateRule {
	-numPeopleDead
}

interface Spreadable {
	+getSpreadChance()
	+setSpreadChance()
}

@enduml

- Select Simulation File
- System manager parses XML
- System manager creates system with configuration from XML
FireSystem(Map<String, Double> config) - Blank values default
- Start/Reset button gui Pressed 
- SystemManger.start() called which calls start on the specific System

for each neighbor

n.s
